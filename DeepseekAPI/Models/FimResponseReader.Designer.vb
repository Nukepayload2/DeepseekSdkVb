' <auto-generated/>
' This source file is part of the JSON serialization code and is not intended to be modified by you.
' Re-run the source generator will overwrite your changes in this file.
' Generated by: Nukepayload2.IO.Json.Serialization.NewtonsoftJson
Option Strict On
Option Infer On
Option Explicit On
Option Compare Binary
Imports Nukepayload2.AI.Providers.Deepseek.Models
Imports System.IO
Imports Newtonsoft.Json.Linq
Imports Nukepayload2.IO.Json.Serialization.NewtonsoftJson

Namespace Serialization
    Partial Class FimResponseReader
        ''' <summary>
        ''' Reads <see cref="FimResponse"/> from JsonReader.
        ''' </summary>
        Public Shared Function ReadFimResponse(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As FimResponse
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("FimResponse", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If
        
            Dim entity As New FimResponse
        
            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "id"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Id = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("FimResponse", name, reader)
                                Else
                                    entity.Id = Convert.ToString(reader.Value)
                                End If
                            Case "choices"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Choices = Nothing
                                Else
                                    entity.Choices = ReadIReadOnlyListOfFimResponseMessage(reader, readState)
                                End If
                            Case "created"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Created = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("FimResponse", name, reader)
                                Else
                                    entity.Created = Convert.ToInt64(reader.Value)
                                End If
                            Case "model"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Model = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("FimResponse", name, reader)
                                Else
                                    entity.Model = Convert.ToString(reader.Value)
                                End If
                            Case "system_fingerprint"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.SystemFingerprint = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("FimResponse", name, reader)
                                Else
                                    entity.SystemFingerprint = Convert.ToString(reader.Value)
                                End If
                            Case "object"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.TypeName = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("FimResponse", name, reader)
                                Else
                                    entity.TypeName = Convert.ToString(reader.Value)
                                End If
                            Case "usage"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Usage = Nothing
                                Else
                                    entity.Usage = ReadUsage(reader, readState)
                                End If
                            Case Else
                                readState.OnMissingProperty("FimResponse", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entity
        End Function ' ReadFimResponse
        ''' <summary>
        ''' Reads <see cref="FimResponseMessage"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadFimResponseMessage(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As FimResponseMessage
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("FimResponseMessage", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If
        
            Dim entity As New FimResponseMessage
        
            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "finish_reason"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.FinishReason = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("FimResponseMessage", name, reader)
                                Else
                                    entity.FinishReason = Convert.ToString(reader.Value)
                                End If
                            Case "index"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Index = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("FimResponseMessage", name, reader)
                                Else
                                    entity.Index = Convert.ToInt64(reader.Value)
                                End If
                            Case "logprobs"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Logprobs = Nothing
                                Else
                                    entity.Logprobs = ReadFimResponseLogprobs(reader, readState)
                                End If
                            Case "text"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Text = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("FimResponseMessage", name, reader)
                                Else
                                    entity.Text = Convert.ToString(reader.Value)
                                End If
                            Case Else
                                readState.OnMissingProperty("FimResponseMessage", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entity
        End Function ' ReadFimResponseMessage
        ''' <summary>
        ''' Reads <see cref="FimResponseLogprobs"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadFimResponseLogprobs(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As FimResponseLogprobs
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("FimResponseLogprobs", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If
        
            Dim entity As New FimResponseLogprobs
        
            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "text_offset"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.TextOffset = Nothing
                                Else
                                    entity.TextOffset = ReadIReadOnlyListOfInt64(reader, readState)
                                End If
                            Case "token_logprobs"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.TokenLogprobs = Nothing
                                Else
                                    entity.TokenLogprobs = ReadIReadOnlyListOfDouble(reader, readState)
                                End If
                            Case "tokens"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Tokens = Nothing
                                Else
                                    entity.Tokens = ReadIReadOnlyListOfString(reader, readState)
                                End If
                            Case "top_logprobs"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.TopLogprobs = Nothing
                                Else
                                    entity.TopLogprobs = ReadIReadOnlyListOfTopLogprobs(reader, readState)
                                End If
                            Case Else
                                readState.OnMissingProperty("FimResponseLogprobs", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entity
        End Function ' ReadFimResponseLogprobs
        ''' <summary>
        ''' Reads <see cref="Logprobs"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadLogprobs(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As Logprobs
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("Logprobs", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If
        
            Dim entity As New Logprobs
        
            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "content"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Content = Nothing
                                Else
                                    entity.Content = ReadIReadOnlyListOfLogprobsContent(reader, readState)
                                End If
                            Case Else
                                readState.OnMissingProperty("Logprobs", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entity
        End Function ' ReadLogprobs
        ''' <summary>
        ''' Reads <see cref="LogprobsContent"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadLogprobsContent(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As LogprobsContent
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("LogprobsContent", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If
        
            Dim entity As New LogprobsContent
        
            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "token"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Token = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("LogprobsContent", name, reader)
                                Else
                                    entity.Token = Convert.ToString(reader.Value)
                                End If
                            Case "logprob"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Logprob = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("LogprobsContent", name, reader)
                                Else
                                    entity.Logprob = Convert.ToDouble(reader.Value)
                                End If
                            Case "bytes"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Bytes = Nothing
                                Else
                                    entity.Bytes = ReadIReadOnlyListOfInt32(reader, readState)
                                End If
                            Case "top_logprobs"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.TopLogprobs = Nothing
                                Else
                                    entity.TopLogprobs = ReadIReadOnlyListOfTopLogprobs(reader, readState)
                                End If
                            Case Else
                                readState.OnMissingProperty("LogprobsContent", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entity
        End Function ' ReadLogprobsContent
        ''' <summary>
        ''' Reads <see cref="TopLogprobs"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadTopLogprobs(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As TopLogprobs
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("TopLogprobs", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If
        
            Dim entity As New TopLogprobs
        
            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "token"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Token = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("TopLogprobs", name, reader)
                                Else
                                    entity.Token = Convert.ToString(reader.Value)
                                End If
                            Case "logprob"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Logprob = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("TopLogprobs", name, reader)
                                Else
                                    entity.Logprob = Convert.ToDouble(reader.Value)
                                End If
                            Case "bytes"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Bytes = Nothing
                                Else
                                    entity.Bytes = ReadIReadOnlyListOfInt32(reader, readState)
                                End If
                            Case Else
                                readState.OnMissingProperty("TopLogprobs", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entity
        End Function ' ReadTopLogprobs
        ''' <summary>
        ''' Reads <see cref="Usage"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadUsage(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As Usage
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("Usage", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If
        
            Dim entity As New Usage
        
            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "completion_tokens"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.CompletionTokens = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("Usage", name, reader)
                                Else
                                    entity.CompletionTokens = Convert.ToInt32(reader.Value)
                                End If
                            Case "prompt_tokens"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.PromptTokens = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("Usage", name, reader)
                                Else
                                    entity.PromptTokens = Convert.ToInt32(reader.Value)
                                End If
                            Case "prompt_cache_hit_tokens"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.PromptCacheHitTokens = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("Usage", name, reader)
                                Else
                                    entity.PromptCacheHitTokens = Convert.ToInt32(reader.Value)
                                End If
                            Case "prompt_cache_miss_tokens"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.PromptCacheMissTokens = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("Usage", name, reader)
                                Else
                                    entity.PromptCacheMissTokens = Convert.ToInt32(reader.Value)
                                End If
                            Case "total_tokens"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.TotalTokens = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("Usage", name, reader)
                                Else
                                    entity.TotalTokens = Convert.ToInt32(reader.Value)
                                End If
                            Case "prompt_tokens_details"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Details = Nothing
                                Else
                                    entity.Details = ReadCompletionTokensDetails(reader, readState)
                                End If
                            Case Else
                                readState.OnMissingProperty("Usage", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entity
        End Function ' ReadUsage
        ''' <summary>
        ''' Reads <see cref="CompletionTokensDetails"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadCompletionTokensDetails(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As CompletionTokensDetails
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("CompletionTokensDetails", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If
        
            Dim entity As New CompletionTokensDetails
        
            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "reasoning_tokens"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.ReasoningTokens = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("CompletionTokensDetails", name, reader)
                                Else
                                    entity.ReasoningTokens = Convert.ToInt32(reader.Value)
                                End If
                            Case "cached_tokens"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.CachedTokens = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("CompletionTokensDetails", name, reader)
                                Else
                                    entity.CachedTokens = Convert.ToInt32(reader.Value)
                                End If
                            Case Else
                                readState.OnMissingProperty("CompletionTokensDetails", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entity
        End Function ' ReadCompletionTokensDetails
        ''' <summary>
        ''' Reads array of <see cref="FimResponseMessage"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadIReadOnlyListOfFimResponseMessage(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As IReadOnlyList(Of FimResponseMessage)
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                If Not reader.Read() Then
                    Throw readState.OnUnrecoverableError("Error reading JArray from JsonReader.")
                End If
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartArray Then
                readState.OnConflictingTokenType("IReadOnlyListOfFimResponseMessage", JsonReadErrorHandler.Positions.StartArray, reader)
                Return Nothing
            End If
        
            Dim entityList As New List(Of FimResponseMessage)
            Dim startDepth As Integer = reader.Depth
        
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Dim item As FimResponseMessage
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.StartObject
                        item = ReadFimResponseMessage(reader, readState)
                    Case Global.Newtonsoft.Json.JsonToken.Null
                        item = Nothing
                    Case Global.Newtonsoft.Json.JsonToken.EndArray
                        Exit Do
                    Case Else
                        readState.OnConflictingTokenType("IReadOnlyListOfFimResponseMessage", JsonReadErrorHandler.Positions.ArrayElement, reader)
                        item = Nothing
                End Select
                entityList.Add(item)
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
        
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entityList
        End Function
        ''' <summary>
        ''' Reads array of <see cref="Int64"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadIReadOnlyListOfInt64(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As IReadOnlyList(Of Int64?)
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                If Not reader.Read() Then
                    Throw readState.OnUnrecoverableError("Error reading JArray from JsonReader.")
                End If
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartArray Then
                readState.OnConflictingTokenType("IReadOnlyListOfInt64", JsonReadErrorHandler.Positions.StartArray, reader)
                Return Nothing
            End If
        
            Dim entityList As New List(Of Int64?)
            Dim startDepth As Integer = reader.Depth
        
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Dim item As Int64?
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.StartObject
                        item = Convert.ToInt64(reader.Value)
                    Case Global.Newtonsoft.Json.JsonToken.Null
                        item = Nothing
                    Case Global.Newtonsoft.Json.JsonToken.EndArray
                        Exit Do
                    Case Else
                        readState.OnConflictingTokenType("IReadOnlyListOfInt64", JsonReadErrorHandler.Positions.ArrayElement, reader)
                        item = Nothing
                End Select
                entityList.Add(item)
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
        
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entityList
        End Function
        ''' <summary>
        ''' Reads array of <see cref="Double"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadIReadOnlyListOfDouble(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As IReadOnlyList(Of Double?)
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                If Not reader.Read() Then
                    Throw readState.OnUnrecoverableError("Error reading JArray from JsonReader.")
                End If
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartArray Then
                readState.OnConflictingTokenType("IReadOnlyListOfDouble", JsonReadErrorHandler.Positions.StartArray, reader)
                Return Nothing
            End If
        
            Dim entityList As New List(Of Double?)
            Dim startDepth As Integer = reader.Depth
        
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Dim item As Double?
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.Integer
                    Case Global.Newtonsoft.Json.JsonToken.Float
                        item = Convert.ToDouble(reader.Value)
                    Case Global.Newtonsoft.Json.JsonToken.Null
                        item = Nothing
                    Case Global.Newtonsoft.Json.JsonToken.EndArray
                        Exit Do
                    Case Else
                        readState.OnConflictingTokenType("IReadOnlyListOfDouble", JsonReadErrorHandler.Positions.ArrayElement, reader)
                        item = Nothing
                End Select
                entityList.Add(item)
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
        
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entityList
        End Function
        ''' <summary>
        ''' Reads array of <see cref="String"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadIReadOnlyListOfString(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As IReadOnlyList(Of String)
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                If Not reader.Read() Then
                    Throw readState.OnUnrecoverableError("Error reading JArray from JsonReader.")
                End If
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartArray Then
                readState.OnConflictingTokenType("IReadOnlyListOfString", JsonReadErrorHandler.Positions.StartArray, reader)
                Return Nothing
            End If
        
            Dim entityList As New List(Of String)
            Dim startDepth As Integer = reader.Depth
        
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Dim item As String
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.String
                        item = Convert.ToString(reader.Value)
                    Case Global.Newtonsoft.Json.JsonToken.Null
                        item = Nothing
                    Case Global.Newtonsoft.Json.JsonToken.EndArray
                        Exit Do
                    Case Else
                        readState.OnConflictingTokenType("IReadOnlyListOfString", JsonReadErrorHandler.Positions.ArrayElement, reader)
                        item = Nothing
                End Select
                entityList.Add(item)
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
        
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entityList
        End Function
        ''' <summary>
        ''' Reads array of <see cref="TopLogprobs"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadIReadOnlyListOfTopLogprobs(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As IReadOnlyList(Of TopLogprobs)
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                If Not reader.Read() Then
                    Throw readState.OnUnrecoverableError("Error reading JArray from JsonReader.")
                End If
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartArray Then
                readState.OnConflictingTokenType("IReadOnlyListOfTopLogprobs", JsonReadErrorHandler.Positions.StartArray, reader)
                Return Nothing
            End If
        
            Dim entityList As New List(Of TopLogprobs)
            Dim startDepth As Integer = reader.Depth
        
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Dim item As TopLogprobs
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.StartObject
                        item = ReadTopLogprobs(reader, readState)
                    Case Global.Newtonsoft.Json.JsonToken.Null
                        item = Nothing
                    Case Global.Newtonsoft.Json.JsonToken.EndArray
                        Exit Do
                    Case Else
                        readState.OnConflictingTokenType("IReadOnlyListOfTopLogprobs", JsonReadErrorHandler.Positions.ArrayElement, reader)
                        item = Nothing
                End Select
                entityList.Add(item)
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
        
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entityList
        End Function
        ''' <summary>
        ''' Reads array of <see cref="LogprobsContent"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadIReadOnlyListOfLogprobsContent(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As IReadOnlyList(Of LogprobsContent)
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                If Not reader.Read() Then
                    Throw readState.OnUnrecoverableError("Error reading JArray from JsonReader.")
                End If
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartArray Then
                readState.OnConflictingTokenType("IReadOnlyListOfLogprobsContent", JsonReadErrorHandler.Positions.StartArray, reader)
                Return Nothing
            End If
        
            Dim entityList As New List(Of LogprobsContent)
            Dim startDepth As Integer = reader.Depth
        
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Dim item As LogprobsContent
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.StartObject
                        item = ReadLogprobsContent(reader, readState)
                    Case Global.Newtonsoft.Json.JsonToken.Null
                        item = Nothing
                    Case Global.Newtonsoft.Json.JsonToken.EndArray
                        Exit Do
                    Case Else
                        readState.OnConflictingTokenType("IReadOnlyListOfLogprobsContent", JsonReadErrorHandler.Positions.ArrayElement, reader)
                        item = Nothing
                End Select
                entityList.Add(item)
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
        
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entityList
        End Function
        ''' <summary>
        ''' Reads array of <see cref="Int32"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadIReadOnlyListOfInt32(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As IReadOnlyList(Of Int32?)
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                If Not reader.Read() Then
                    Throw readState.OnUnrecoverableError("Error reading JArray from JsonReader.")
                End If
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartArray Then
                readState.OnConflictingTokenType("IReadOnlyListOfInt32", JsonReadErrorHandler.Positions.StartArray, reader)
                Return Nothing
            End If
        
            Dim entityList As New List(Of Int32?)
            Dim startDepth As Integer = reader.Depth
        
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Dim item As Int32?
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.Integer
                        item = Convert.ToInt32(reader.Value)
                    Case Global.Newtonsoft.Json.JsonToken.Null
                        item = Nothing
                    Case Global.Newtonsoft.Json.JsonToken.EndArray
                        Exit Do
                    Case Else
                        readState.OnConflictingTokenType("IReadOnlyListOfInt32", JsonReadErrorHandler.Positions.ArrayElement, reader)
                        item = Nothing
                End Select
                entityList.Add(item)
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
        
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entityList
        End Function

    End Class ' FimResponseReader
End Namespace
