' <auto-generated/>
' This source file is part of the JSON serialization code and is not intended to be modified by you.
' Re-run the source generator will overwrite your changes in this file.
' Generated by: Nukepayload2.IO.Json.Serialization.NewtonsoftJson
Option Strict On
Option Infer On
Option Explicit On
Option Compare Binary
Imports System.IO
Imports Newtonsoft.Json.Linq
Imports Nukepayload2.IO.Json.Serialization.NewtonsoftJson
Imports Nukepayload2.AI.Providers.Deepseek.Models

Namespace Serialization
    Partial Class ListModelsReader
        ''' <summary>
        ''' Reads <see cref="ListModelResponse"/> from JsonReader.
        ''' </summary>
        Public Shared Function ReadListModelResponse(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As ListModelResponse
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If

            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("JsonListModelResponse", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If

            Dim entity As New ListModelResponse

            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If

            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "object"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.TypeName = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("JsonListModelResponse", name, reader)
                                Else
                                    entity.TypeName = Convert.ToString(reader.Value)
                                End If
                            Case "data"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Data = Nothing
                                Else
                                    entity.Data = ReadIReadOnlyListOfModelBasicInformation(reader, readState)
                                End If
                            Case Else
                                readState.OnMissingProperty("JsonListModelResponse", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()

            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If

            Return entity
        End Function ' ReadJsonListModelResponse
        ''' <summary>
        ''' Reads <see cref="ModelBasicInformation"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadModelBasicInformation(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As ModelBasicInformation
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If

            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("ModelBasicInformation", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If

            Dim entity As New ModelBasicInformation

            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If

            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "id"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Id = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ModelBasicInformation", name, reader)
                                Else
                                    entity.Id = Convert.ToString(reader.Value)
                                End If
                            Case "object"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.TypeName = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ModelBasicInformation", name, reader)
                                Else
                                    entity.TypeName = Convert.ToString(reader.Value)
                                End If
                            Case "owned_by"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.OwnedBy = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ModelBasicInformation", name, reader)
                                Else
                                    entity.OwnedBy = Convert.ToString(reader.Value)
                                End If
                            Case Else
                                readState.OnMissingProperty("ModelBasicInformation", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()

            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If

            Return entity
        End Function ' ReadModelBasicInformation
        ''' <summary>
        ''' Reads array of <see cref="ModelBasicInformation"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadIReadOnlyListOfModelBasicInformation(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As IReadOnlyList(Of ModelBasicInformation)
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                If Not reader.Read() Then
                    Throw readState.OnUnrecoverableError("Error reading JArray from JsonReader.")
                End If
            End If

            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartArray Then
                readState.OnConflictingTokenType("IReadOnlyListOfModelBasicInformation", JsonReadErrorHandler.Positions.StartArray, reader)
                Return Nothing
            End If

            Dim entityList As New List(Of ModelBasicInformation)
            Dim startDepth As Integer = reader.Depth

            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If

            Do
                Dim item As ModelBasicInformation
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.StartObject
                        item = ReadModelBasicInformation(reader, readState)
                    Case Global.Newtonsoft.Json.JsonToken.Null
                        item = Nothing
                    Case Global.Newtonsoft.Json.JsonToken.EndArray
                        Exit Do
                    Case Else
                        readState.OnConflictingTokenType("IReadOnlyListOfModelBasicInformation", JsonReadErrorHandler.Positions.ArrayElement, reader)
                        item = Nothing
                End Select
                entityList.Add(item)
            Loop While reader.Read()

            Dim endDepth As Integer = reader.Depth

            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If

            Return entityList
        End Function

    End Class ' ListModelsReader
End Namespace
