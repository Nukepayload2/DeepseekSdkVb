' <auto-generated/>
' This source file is part of the JSON serialization code and is not intended to be modified by you.
' Re-run the source generator will overwrite your changes in this file.
' Generated by: Nukepayload2.IO.Json.Serialization.NewtonsoftJson
Option Strict On
Option Infer On
Option Explicit On
Option Compare Binary
Imports Nukepayload2.AI.Providers.Deepseek.Models
Imports System.IO
Imports Newtonsoft.Json.Linq
Imports Nukepayload2.IO.Json.Serialization.NewtonsoftJson

Namespace Serialization
    Partial Class RequestReader
        ''' <summary>
        ''' Reads <see cref="ChatRequest"/> from JsonReader.
        ''' </summary>
        Public Shared Function ReadChatRequest(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As ChatRequest
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("ChatRequest", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If
        
            Dim entity As New ChatRequest
        
            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "messages"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Messages = Nothing
                                Else
                                    entity.Messages = ReadIReadOnlyListOfChatMessage(reader, readState)
                                End If
                            Case "model"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Model = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ChatRequest", name, reader)
                                Else
                                    entity.Model = Convert.ToString(reader.Value)
                                End If
                            Case "frequency_penalty"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.FrequencyPenalty = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ChatRequest", name, reader)
                                Else
                                    entity.FrequencyPenalty = Convert.ToDouble(reader.Value)
                                End If
                            Case "max_tokens"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.MaxTokens = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ChatRequest", name, reader)
                                Else
                                    entity.MaxTokens = Convert.ToInt32(reader.Value)
                                End If
                            Case "presence_penalty"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.PresencePenalty = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ChatRequest", name, reader)
                                Else
                                    entity.PresencePenalty = Convert.ToDouble(reader.Value)
                                End If
                            Case "response_format"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.ResponseFormat = Nothing
                                Else
                                    entity.ResponseFormat = ReadResponseFormat(reader, readState)
                                End If
                            Case "stop"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.StopWords = Nothing
                                Else
                                    entity.StopWords = ReadIReadOnlyListOfString(reader, readState)
                                End If
                            Case "stream"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Stream = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ChatRequest", name, reader)
                                Else
                                    entity.Stream = Convert.ToBoolean(reader.Value)
                                End If
                            Case "tools"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Tools = Nothing
                                Else
                                    entity.Tools = ReadIReadOnlyListOfAICallableTool(reader, readState)
                                End If
                            Case "tool_choice"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.ToolChoice = Nothing
                                Else
                                    entity.ToolChoice = ReadStringOrObjectOfNamedToolChoice(reader, readState)
                                End If
                            Case "stream_options"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.StreamOptions = Nothing
                                Else
                                    entity.StreamOptions = ReadStreamOptions(reader, readState)
                                End If
                            Case "temperature"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Temperature = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ChatRequest", name, reader)
                                Else
                                    entity.Temperature = Convert.ToDouble(reader.Value)
                                End If
                            Case "top_p"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.TopP = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ChatRequest", name, reader)
                                Else
                                    entity.TopP = Convert.ToDouble(reader.Value)
                                End If
                            Case "logprobs"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Logprobs = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ChatRequest", name, reader)
                                Else
                                    entity.Logprobs = Convert.ToBoolean(reader.Value)
                                End If
                            Case "top_logprobs"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.TopLogprobs = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ChatRequest", name, reader)
                                Else
                                    entity.TopLogprobs = Convert.ToInt32(reader.Value)
                                End If
                            Case Else
                                readState.OnMissingProperty("ChatRequest", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entity
        End Function ' ReadChatRequest
        ''' <summary>
        ''' Reads <see cref="ChatMessage"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadChatMessage(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As ChatMessage
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("ChatMessage", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If
        
            Dim entity As New ChatMessage
        
            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "content"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Content = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ChatMessage", name, reader)
                                Else
                                    entity.Content = Convert.ToString(reader.Value)
                                End If
                            Case "role"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Role = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ChatMessage", name, reader)
                                Else
                                    entity.Role = Convert.ToString(reader.Value)
                                End If
                            Case "name"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Name = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ChatMessage", name, reader)
                                Else
                                    entity.Name = Convert.ToString(reader.Value)
                                End If
                            Case "prefix"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Prefix = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ChatMessage", name, reader)
                                Else
                                    entity.Prefix = Convert.ToBoolean(reader.Value)
                                End If
                            Case "reasoning_content"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.ReasoningContent = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ChatMessage", name, reader)
                                Else
                                    entity.ReasoningContent = Convert.ToString(reader.Value)
                                End If
                            Case "tool_call_id"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.ToolCallId = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ChatMessage", name, reader)
                                Else
                                    entity.ToolCallId = Convert.ToString(reader.Value)
                                End If
                            Case Else
                                readState.OnMissingProperty("ChatMessage", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entity
        End Function ' ReadChatMessage
        ''' <summary>
        ''' Reads <see cref="ResponseFormat"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadResponseFormat(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As ResponseFormat
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("ResponseFormat", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If
        
            Dim entity As New ResponseFormat
        
            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "type"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Type = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("ResponseFormat", name, reader)
                                Else
                                    entity.Type = Convert.ToString(reader.Value)
                                End If
                            Case Else
                                readState.OnMissingProperty("ResponseFormat", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entity
        End Function ' ReadResponseFormat
        ''' <summary>
        ''' Reads <see cref="AICallableTool"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadAICallableTool(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As AICallableTool
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("AICallableTool", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If
        
            Dim entity As New AICallableTool
        
            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "type"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Type = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("AICallableTool", name, reader)
                                Else
                                    entity.Type = Convert.ToString(reader.Value)
                                End If
                            Case "function"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Function = Nothing
                                Else
                                    entity.Function = ReadFunctionMetadata(reader, readState)
                                End If
                            Case Else
                                readState.OnMissingProperty("AICallableTool", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entity
        End Function ' ReadAICallableTool
        ''' <summary>
        ''' Reads <see cref="FunctionMetadata"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadFunctionMetadata(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As FunctionMetadata
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("FunctionMetadata", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If
        
            Dim entity As New FunctionMetadata
        
            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "name"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Name = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("FunctionMetadata", name, reader)
                                Else
                                    entity.Name = Convert.ToString(reader.Value)
                                End If
                            Case "description"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Description = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("FunctionMetadata", name, reader)
                                Else
                                    entity.Description = Convert.ToString(reader.Value)
                                End If
                            Case "parameters"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Parameters = Nothing
                                Else
                                    entity.Parameters = ReadFunctionParameters(reader, readState)
                                End If
                            Case Else
                                readState.OnMissingProperty("FunctionMetadata", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entity
        End Function ' ReadFunctionMetadata
        ''' <summary>
        ''' Reads <see cref="FunctionParameters"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadFunctionParameters(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As FunctionParameters
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("FunctionParameters", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If
        
            Dim entity As New FunctionParameters
        
            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "type"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Type = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("FunctionParameters", name, reader)
                                Else
                                    entity.Type = Convert.ToString(reader.Value)
                                End If
                            Case "properties"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Properties = Nothing
                                Else
                                    entity.Properties = ReadDictionaryOfStringAndFunctionParameterDescriptor(reader, readState)
                                End If
                            Case "required"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Required = Nothing
                                Else
                                    entity.Required = ReadIReadOnlyListOfString(reader, readState)
                                End If
                            Case Else
                                readState.OnMissingProperty("FunctionParameters", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entity
        End Function ' ReadFunctionParameters
        ''' <summary>
        ''' Reads <see cref="FunctionParameterDescriptor"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadFunctionParameterDescriptor(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As FunctionParameterDescriptor
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("FunctionParameterDescriptor", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If
        
            Dim entity As New FunctionParameterDescriptor
        
            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "type"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Type = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("FunctionParameterDescriptor", name, reader)
                                Else
                                    entity.Type = Convert.ToString(reader.Value)
                                End If
                            Case "description"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Description = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("FunctionParameterDescriptor", name, reader)
                                Else
                                    entity.Description = Convert.ToString(reader.Value)
                                End If
                            Case "default"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.DefaultJson = Nothing
                                Else
                                    entity.DefaultJson = Global.Newtonsoft.Json.JsonSerializer.CreateDefault().Deserialize(Of Global.Newtonsoft.Json.Linq.JValue)(reader)
                                End If
                            Case "enum"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.EnumJson = Nothing
                                Else
                                    entity.EnumJson = ReadIReadOnlyListOfJValue(reader, readState)
                                End If
                            Case Else
                                readState.OnMissingProperty("FunctionParameterDescriptor", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entity
        End Function ' ReadFunctionParameterDescriptor
        ''' <summary>
        ''' Reads <see cref="NamedToolChoice"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadNamedToolChoice(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As NamedToolChoice
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("NamedToolChoice", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If
        
            Dim entity As New NamedToolChoice
        
            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "type"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Type = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("NamedToolChoice", name, reader)
                                Else
                                    entity.Type = Convert.ToString(reader.Value)
                                End If
                            Case "function"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.FunctionChoice = Nothing
                                Else
                                    entity.FunctionChoice = ReadNamedToolChoiceFunction(reader, readState)
                                End If
                            Case Else
                                readState.OnMissingProperty("NamedToolChoice", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entity
        End Function ' ReadNamedToolChoice
        ''' <summary>
        ''' Reads <see cref="NamedToolChoiceFunction"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadNamedToolChoiceFunction(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As NamedToolChoiceFunction
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("NamedToolChoiceFunction", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If
        
            Dim entity As New NamedToolChoiceFunction
        
            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "name"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.Name = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("NamedToolChoiceFunction", name, reader)
                                Else
                                    entity.Name = Convert.ToString(reader.Value)
                                End If
                            Case Else
                                readState.OnMissingProperty("NamedToolChoiceFunction", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entity
        End Function ' ReadNamedToolChoiceFunction
        ''' <summary>
        ''' Reads <see cref="StreamOptions"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadStreamOptions(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As StreamOptions
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("StreamOptions", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If
        
            Dim entity As New StreamOptions
        
            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                        Select Case name
                            Case "include_usage"
                                If Not reader.Read() Then
                                    Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                                End If
                                If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                    entity.IncludeUsage = Nothing
                                ElseIf reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartObject Or reader.TokenType = Global.Newtonsoft.Json.JsonToken.StartArray Then
                                    readState.OnConflictingTokenType("StreamOptions", name, reader)
                                Else
                                    entity.IncludeUsage = Convert.ToBoolean(reader.Value)
                                End If
                            Case Else
                                readState.OnMissingProperty("StreamOptions", name, reader)
                        End Select
                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entity
        End Function ' ReadStreamOptions
        ''' <summary>
        ''' Reads array of <see cref="ChatMessage"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadIReadOnlyListOfChatMessage(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As IReadOnlyList(Of ChatMessage)
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                If Not reader.Read() Then
                    Throw readState.OnUnrecoverableError("Error reading JArray from JsonReader.")
                End If
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartArray Then
                readState.OnConflictingTokenType("IReadOnlyListOfChatMessage", JsonReadErrorHandler.Positions.StartArray, reader)
                Return Nothing
            End If
        
            Dim entityList As New List(Of ChatMessage)
            Dim startDepth As Integer = reader.Depth
        
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Dim item As ChatMessage
                Select Case reader.TokenType
                    case Global.Newtonsoft.Json.JsonToken.StartObject:
                        item = ReadChatMessage(reader, readState)
                    Case Global.Newtonsoft.Json.JsonToken.Null
                        item = Nothing
                    Case Global.Newtonsoft.Json.JsonToken.EndArray
                        Exit Do
                    Case Else
                        readState.OnConflictingTokenType("IReadOnlyListOfChatMessage", JsonReadErrorHandler.Positions.ArrayElement, reader)
                        item = Nothing
                End Select
                entityList.Add(item)
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
        
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entityList
        End Function
        ''' <summary>
        ''' Reads array of <see cref="String"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadIReadOnlyListOfString(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As IReadOnlyList(Of String)
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                If Not reader.Read() Then
                    Throw readState.OnUnrecoverableError("Error reading JArray from JsonReader.")
                End If
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartArray Then
                readState.OnConflictingTokenType("IReadOnlyListOfString", JsonReadErrorHandler.Positions.StartArray, reader)
                Return Nothing
            End If
        
            Dim entityList As New List(Of String)
            Dim startDepth As Integer = reader.Depth
        
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Dim item As String
                Select Case reader.TokenType
                    case Global.Newtonsoft.Json.JsonToken.String:
                        item = Convert.ToString(reader.Value)
                    Case Global.Newtonsoft.Json.JsonToken.Null
                        item = Nothing
                    Case Global.Newtonsoft.Json.JsonToken.EndArray
                        Exit Do
                    Case Else
                        readState.OnConflictingTokenType("IReadOnlyListOfString", JsonReadErrorHandler.Positions.ArrayElement, reader)
                        item = Nothing
                End Select
                entityList.Add(item)
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
        
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entityList
        End Function
        ''' <summary>
        ''' Reads array of <see cref="AICallableTool"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadIReadOnlyListOfAICallableTool(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As IReadOnlyList(Of AICallableTool)
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                If Not reader.Read() Then
                    Throw readState.OnUnrecoverableError("Error reading JArray from JsonReader.")
                End If
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartArray Then
                readState.OnConflictingTokenType("IReadOnlyListOfAICallableTool", JsonReadErrorHandler.Positions.StartArray, reader)
                Return Nothing
            End If
        
            Dim entityList As New List(Of AICallableTool)
            Dim startDepth As Integer = reader.Depth
        
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Dim item As AICallableTool
                Select Case reader.TokenType
                    case Global.Newtonsoft.Json.JsonToken.StartObject:
                        item = ReadAICallableTool(reader, readState)
                    Case Global.Newtonsoft.Json.JsonToken.Null
                        item = Nothing
                    Case Global.Newtonsoft.Json.JsonToken.EndArray
                        Exit Do
                    Case Else
                        readState.OnConflictingTokenType("IReadOnlyListOfAICallableTool", JsonReadErrorHandler.Positions.ArrayElement, reader)
                        item = Nothing
                End Select
                entityList.Add(item)
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
        
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entityList
        End Function
        ''' <summary>
        ''' Reads array of <see cref="JValue"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadIReadOnlyListOfJValue(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As IReadOnlyList(Of JValue)
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                If Not reader.Read() Then
                    Throw readState.OnUnrecoverableError("Error reading JArray from JsonReader.")
                End If
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartArray Then
                readState.OnConflictingTokenType("IReadOnlyListOfJValue", JsonReadErrorHandler.Positions.StartArray, reader)
                Return Nothing
            End If
        
            Dim entityList As New List(Of JValue)
            Dim startDepth As Integer = reader.Depth
        
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Dim item As JValue
                Select Case reader.TokenType
                    case Global.Newtonsoft.Json.JsonToken.StartObject:
                        item = Global.Newtonsoft.Json.JsonSerializer.CreateDefault().Deserialize(Of Global.Newtonsoft.Json.Linq.JValue)(reader)
                    Case Global.Newtonsoft.Json.JsonToken.Null
                        item = Nothing
                    Case Global.Newtonsoft.Json.JsonToken.EndArray
                        Exit Do
                    Case Else
                        readState.OnConflictingTokenType("IReadOnlyListOfJValue", JsonReadErrorHandler.Positions.ArrayElement, reader)
                        item = Nothing
                End Select
                entityList.Add(item)
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
        
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entityList
        End Function
        ''' <summary>
        ''' Reads composite type <see cref="StringOrObjectOfNamedToolChoice"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadStringOrObjectOfNamedToolChoice(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As StringOrObject(Of NamedToolChoice)
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If
        
            Dim startDepth As Integer = reader.Depth
        
            Dim item As New StringOrObject(Of NamedToolChoice)
        
            Select Case reader.TokenType
                Case Global.Newtonsoft.Json.JsonToken.StartObject
                    item.ObjectValue = ReadNamedToolChoice(reader, readState)
                Case Global.Newtonsoft.Json.JsonToken.String
                    item.StringValue = Convert.ToString(reader.Value)
                Case Global.Newtonsoft.Json.JsonToken.Null
                    ' Do nothing when we have null in composite type. No property to set.
                Case Else
                    readState.OnConflictingTokenType("StringOrObjectOfNamedToolChoice", JsonReadErrorHandler.Positions.JTokenDiscriminator, reader)
            End Select

            Dim endDepth As Integer = reader.Depth

            If endDepth <> startDepth Then
                throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If

            Return item
        End Function ' ReadStringOrObjectOfNamedToolChoice
        ''' <summary>
        ''' Reads <see cref="DictionaryOfStringAndFunctionParameterDescriptor"/> from JsonReader.
        ''' </summary>
        Private Shared Function ReadDictionaryOfStringAndFunctionParameterDescriptor(reader As Global.Newtonsoft.Json.JsonReader, readState As JsonReadErrorHandler) As Dictionary(Of String, FunctionParameterDescriptor)
            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.None Then
                reader.Read()
            End If
        
            If reader.TokenType <> Global.Newtonsoft.Json.JsonToken.StartObject Then
                readState.OnConflictingTokenType("DictionaryOfStringAndFunctionParameterDescriptor", JsonReadErrorHandler.Positions.StartObject, reader)
                Return Nothing
            End If
        
            Dim entity As New Dictionary(Of String, FunctionParameterDescriptor)
        
            Dim startDepth As Integer = reader.Depth
            If Not reader.Read() Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
            End If
        
            Do
                Select Case reader.TokenType
                    Case Global.Newtonsoft.Json.JsonToken.PropertyName
                        Dim name As String = CType(reader.Value, String)
                            If Not reader.Read() Then
                                Throw readState.OnUnrecoverableError("Error reading from JsonReader. File was truncated.")
                            End If
                            If reader.TokenType = Global.Newtonsoft.Json.JsonToken.Null Then
                                entity(name) = Nothing
                            Else
                                entity(name) = ReadFunctionParameterDescriptor(reader, readState)
                            End If

                    Case Global.Newtonsoft.Json.JsonToken.EndObject
                        Exit Do
                    Case Else
                        Throw readState.OnUnrecoverableError("Unexpected token while loading JObject. The reader is at unexpected position.")
                End Select
            Loop While reader.Read()
        
            Dim endDepth As Integer = reader.Depth
            If endDepth <> startDepth Then
                Throw readState.OnUnrecoverableError("Error reading from JsonReader. The reader is at unexpected position.")
            End If
        
            Return entity
        End Function ' ReadDictionaryOfStringAndFunctionParameterDescriptor

    End Class ' RequestReader
End Namespace
