' <auto-generated/>
' This source file is part of the JSON serialization code and is not intended to be modified by you.
' Re-run the source generator will overwrite your changes in this file.
' Generated by: Nukepayload2.IO.Json.Serialization.NewtonsoftJson
Option Strict On
Option Infer On
Option Explicit On
Option Compare Binary
Imports Nukepayload2.AI.Providers.Deepseek.Models
Imports Newtonsoft.Json.Linq

Namespace Serialization
    Partial Class RequestWriter

        ''' <summary>
        ''' Writes <see cref="ChatRequest"/> to JsonWriter.
        ''' </summary>
        Public Shared Sub WriteChatRequest(writer As Global.Newtonsoft.Json.JsonWriter, value As ChatRequest)
            If value Is Nothing Then
                writer.WriteNull()
                Return
            End If

            writer.WriteStartObject()
            If value.Messages IsNot Nothing Then
                writer.WritePropertyName("messages")
                WriteIReadOnlyListOfChatMessage(writer, value.Messages)
            End If
            If value.Model IsNot Nothing Then
                writer.WritePropertyName("model")
                writer.WriteValue(value.Model)
            End If
            If value.FrequencyPenalty IsNot Nothing Then
                writer.WritePropertyName("frequency_penalty")
                writer.WriteValue(value.FrequencyPenalty)
            End If
            If value.MaxTokens IsNot Nothing Then
                writer.WritePropertyName("max_tokens")
                writer.WriteValue(value.MaxTokens)
            End If
            If value.PresencePenalty IsNot Nothing Then
                writer.WritePropertyName("presence_penalty")
                writer.WriteValue(value.PresencePenalty)
            End If
            If value.ResponseFormat IsNot Nothing Then
                writer.WritePropertyName("response_format")
                WriteResponseFormat(writer, value.ResponseFormat)
            End If
            If value.StopWords IsNot Nothing Then
                writer.WritePropertyName("stop")
                WriteIReadOnlyListOfString(writer, value.StopWords)
            End If
            If value.Stream IsNot Nothing Then
                writer.WritePropertyName("stream")
                writer.WriteValue(value.Stream)
            End If
            If value.Tools IsNot Nothing Then
                writer.WritePropertyName("tools")
                WriteIReadOnlyListOfAICallableTool(writer, value.Tools)
            End If
            If value.ToolChoice IsNot Nothing Then
                writer.WritePropertyName("tool_choice")
                WriteStringOrObjectOfNamedToolChoice(writer, value.ToolChoice)
            End If
            If value.StreamOptions IsNot Nothing Then
                writer.WritePropertyName("stream_options")
                WriteStreamOptions(writer, value.StreamOptions)
            End If
            If value.Temperature IsNot Nothing Then
                writer.WritePropertyName("temperature")
                writer.WriteValue(value.Temperature)
            End If
            If value.TopP IsNot Nothing Then
                writer.WritePropertyName("top_p")
                writer.WriteValue(value.TopP)
            End If
            If value.Logprobs IsNot Nothing Then
                writer.WritePropertyName("logprobs")
                writer.WriteValue(value.Logprobs)
            End If
            If value.TopLogprobs IsNot Nothing Then
                writer.WritePropertyName("top_logprobs")
                writer.WriteValue(value.TopLogprobs)
            End If

            writer.WriteEndObject()
        End Sub ' WriteChatRequest

        ''' <summary>
        ''' Writes <see cref="ChatMessage"/> to JsonWriter.
        ''' </summary>
        Private Shared Sub WriteChatMessage(writer As Global.Newtonsoft.Json.JsonWriter, value As ChatMessage)
            If value Is Nothing Then
                writer.WriteNull()
                Return
            End If

            writer.WriteStartObject()
            If value.Content IsNot Nothing Then
                writer.WritePropertyName("content")
                writer.WriteValue(value.Content)
            End If
            If value.Role IsNot Nothing Then
                writer.WritePropertyName("role")
                writer.WriteValue(value.Role)
            End If
            If value.Name IsNot Nothing Then
                writer.WritePropertyName("name")
                writer.WriteValue(value.Name)
            End If
            If value.Prefix IsNot Nothing Then
                writer.WritePropertyName("prefix")
                writer.WriteValue(value.Prefix)
            End If
            If value.ReasoningContent IsNot Nothing Then
                writer.WritePropertyName("reasoning_content")
                writer.WriteValue(value.ReasoningContent)
            End If
            If value.ToolCallId IsNot Nothing Then
                writer.WritePropertyName("tool_call_id")
                writer.WriteValue(value.ToolCallId)
            End If

            writer.WriteEndObject()
        End Sub ' WriteChatMessage

        ''' <summary>
        ''' Writes <see cref="ResponseFormat"/> to JsonWriter.
        ''' </summary>
        Private Shared Sub WriteResponseFormat(writer As Global.Newtonsoft.Json.JsonWriter, value As ResponseFormat)
            If value Is Nothing Then
                writer.WriteNull()
                Return
            End If

            writer.WriteStartObject()
            If value.Type IsNot Nothing Then
                writer.WritePropertyName("type")
                writer.WriteValue(value.Type)
            End If

            writer.WriteEndObject()
        End Sub ' WriteResponseFormat

        ''' <summary>
        ''' Writes <see cref="AICallableTool"/> to JsonWriter.
        ''' </summary>
        Private Shared Sub WriteAICallableTool(writer As Global.Newtonsoft.Json.JsonWriter, value As AICallableTool)
            If value Is Nothing Then
                writer.WriteNull()
                Return
            End If

            writer.WriteStartObject()
            If value.Type IsNot Nothing Then
                writer.WritePropertyName("type")
                writer.WriteValue(value.Type)
            End If
            If value.FunctionMetadata IsNot Nothing Then
                writer.WritePropertyName("function")
                WriteFunctionMetadata(writer, value.FunctionMetadata)
            End If

            writer.WriteEndObject()
        End Sub ' WriteAICallableTool

        ''' <summary>
        ''' Writes <see cref="FunctionMetadata"/> to JsonWriter.
        ''' </summary>
        Private Shared Sub WriteFunctionMetadata(writer As Global.Newtonsoft.Json.JsonWriter, value As FunctionMetadata)
            If value Is Nothing Then
                writer.WriteNull()
                Return
            End If

            writer.WriteStartObject()
            If value.Name IsNot Nothing Then
                writer.WritePropertyName("name")
                writer.WriteValue(value.Name)
            End If
            If value.Description IsNot Nothing Then
                writer.WritePropertyName("description")
                writer.WriteValue(value.Description)
            End If
            If value.Parameters IsNot Nothing Then
                writer.WritePropertyName("parameters")
                WriteFunctionParameters(writer, value.Parameters)
            End If

            writer.WriteEndObject()
        End Sub ' WriteFunctionMetadata

        ''' <summary>
        ''' Writes <see cref="FunctionParameters"/> to JsonWriter.
        ''' </summary>
        Private Shared Sub WriteFunctionParameters(writer As Global.Newtonsoft.Json.JsonWriter, value As FunctionParameters)
            If value Is Nothing Then
                writer.WriteNull()
                Return
            End If

            writer.WriteStartObject()
            If value.Type IsNot Nothing Then
                writer.WritePropertyName("type")
                writer.WriteValue(value.Type)
            End If
            If value.Properties IsNot Nothing Then
                writer.WritePropertyName("properties")
                writer.WriteStartObject()
                For Each prop In value.Properties
                    writer.WritePropertyName(prop.Key)
                WriteFunctionParameterDescriptor(writer, prop.Value)
                Next
                writer.WriteEndObject()
            End If
            If value.Required IsNot Nothing Then
                writer.WritePropertyName("required")
                WriteIReadOnlyListOfString(writer, value.Required)
            End If

            writer.WriteEndObject()
        End Sub ' WriteFunctionParameters

        ''' <summary>
        ''' Writes <see cref="FunctionParameterDescriptor"/> to JsonWriter.
        ''' </summary>
        Private Shared Sub WriteFunctionParameterDescriptor(writer As Global.Newtonsoft.Json.JsonWriter, value As FunctionParameterDescriptor)
            If value Is Nothing Then
                writer.WriteNull()
                Return
            End If

            writer.WriteStartObject()
            If value.Type IsNot Nothing Then
                writer.WritePropertyName("type")
                writer.WriteValue(value.Type)
            End If
            If value.Description IsNot Nothing Then
                writer.WritePropertyName("description")
                writer.WriteValue(value.Description)
            End If
            If value.DefaultJson IsNot Nothing Then
                writer.WritePropertyName("default")
                Global.Newtonsoft.Json.JsonSerializer.CreateDefault().Serialize(writer, value.DefaultJson)
            End If
            If value.EnumJson IsNot Nothing Then
                writer.WritePropertyName("enum")
                WriteIReadOnlyListOfJValue(writer, value.EnumJson)
            End If

            writer.WriteEndObject()
        End Sub ' WriteFunctionParameterDescriptor

        ''' <summary>
        ''' Writes <see cref="NamedToolChoice"/> to JsonWriter.
        ''' </summary>
        Private Shared Sub WriteNamedToolChoice(writer As Global.Newtonsoft.Json.JsonWriter, value As NamedToolChoice)
            If value Is Nothing Then
                writer.WriteNull()
                Return
            End If

            writer.WriteStartObject()
            If value.Type IsNot Nothing Then
                writer.WritePropertyName("type")
                writer.WriteValue(value.Type)
            End If
            If value.FunctionChoice IsNot Nothing Then
                writer.WritePropertyName("function")
                WriteNamedToolChoiceFunction(writer, value.FunctionChoice)
            End If

            writer.WriteEndObject()
        End Sub ' WriteNamedToolChoice

        ''' <summary>
        ''' Writes <see cref="NamedToolChoiceFunction"/> to JsonWriter.
        ''' </summary>
        Private Shared Sub WriteNamedToolChoiceFunction(writer As Global.Newtonsoft.Json.JsonWriter, value As NamedToolChoiceFunction)
            If value Is Nothing Then
                writer.WriteNull()
                Return
            End If

            writer.WriteStartObject()
            If value.Name IsNot Nothing Then
                writer.WritePropertyName("name")
                writer.WriteValue(value.Name)
            End If

            writer.WriteEndObject()
        End Sub ' WriteNamedToolChoiceFunction

        ''' <summary>
        ''' Writes <see cref="StreamOptions"/> to JsonWriter.
        ''' </summary>
        Private Shared Sub WriteStreamOptions(writer As Global.Newtonsoft.Json.JsonWriter, value As StreamOptions)
            If value Is Nothing Then
                writer.WriteNull()
                Return
            End If

            writer.WriteStartObject()
            If value.IncludeUsage IsNot Nothing Then
                writer.WritePropertyName("include_usage")
                writer.WriteValue(value.IncludeUsage)
            End If

            writer.WriteEndObject()
        End Sub ' WriteStreamOptions

        ''' <summary>
        ''' Writes array of <see cref="ChatMessage"/> to JsonWriter.
        ''' </summary>
        Private Shared Sub WriteIReadOnlyListOfChatMessage(writer As Global.Newtonsoft.Json.JsonWriter, value As IReadOnlyList(Of ChatMessage))
            If value Is Nothing Then
                writer.WriteNull()
                Return
            End If

            writer.WriteStartArray()
            For Each item In value
                WriteChatMessage(writer, item)
            Next
            writer.WriteEndArray()
        End Sub

        ''' <summary>
        ''' Writes array of <see cref="String"/> to JsonWriter.
        ''' </summary>
        Private Shared Sub WriteIReadOnlyListOfString(writer As Global.Newtonsoft.Json.JsonWriter, value As IReadOnlyList(Of String))
            If value Is Nothing Then
                writer.WriteNull()
                Return
            End If

            writer.WriteStartArray()
            For Each item In value
                writer.WriteValue(item)
            Next
            writer.WriteEndArray()
        End Sub

        ''' <summary>
        ''' Writes array of <see cref="AICallableTool"/> to JsonWriter.
        ''' </summary>
        Private Shared Sub WriteIReadOnlyListOfAICallableTool(writer As Global.Newtonsoft.Json.JsonWriter, value As IReadOnlyList(Of AICallableTool))
            If value Is Nothing Then
                writer.WriteNull()
                Return
            End If

            writer.WriteStartArray()
            For Each item In value
                WriteAICallableTool(writer, item)
            Next
            writer.WriteEndArray()
        End Sub

        ''' <summary>
        ''' Writes array of <see cref="JValue"/> to JsonWriter.
        ''' </summary>
        Private Shared Sub WriteIReadOnlyListOfJValue(writer As Global.Newtonsoft.Json.JsonWriter, value As IReadOnlyList(Of JValue))
            If value Is Nothing Then
                writer.WriteNull()
                Return
            End If

            writer.WriteStartArray()
            For Each item In value
                Global.Newtonsoft.Json.JsonSerializer.CreateDefault().Serialize(writer, item)
            Next
            writer.WriteEndArray()
        End Sub

        ''' <summary>
        ''' Writes composite type <see cref="StringOrObjectOfNamedToolChoice"/> with type-based discriminator to JsonWriter.
        ''' </summary>
        Private Shared Sub WriteStringOrObjectOfNamedToolChoice(writer As Global.Newtonsoft.Json.JsonWriter, value As StringOrObject(Of NamedToolChoice))
            If value Is Nothing Then
                writer.WriteNull()
                Return
            End If
            If value.ObjectValue IsNot Nothing Then
                WriteNamedToolChoice(writer, value.ObjectValue)
            ElseIf value.StringValue IsNot Nothing Then
                writer.WriteValue(value.StringValue)
            Else
                writer.WriteNull()
            End If
        End Sub ' WriteStringOrObjectOfNamedToolChoice

    End Class ' RequestWriter
End Namespace
